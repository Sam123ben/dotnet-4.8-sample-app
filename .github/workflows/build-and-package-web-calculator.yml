name: Build and Deploy Web Calculator

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
    paths:
      - 'WebCalculator/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'WebCalculator/**'
      - '.github/workflows/**'

env:
  BUILD_CONFIGURATION: 'Release'
  PROJECT_NAME: 'WebCalculator'
  PROJECT_FOLDER: 'WebCalculator'

jobs:
  build-and-package:
    runs-on: windows-latest
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2

    - name: Verify project structure
      run: |
        if (Test-Path "${{ env.PROJECT_FOLDER }}") {
          Write-Host "✅ Project folder found"
          Get-ChildItem "${{ env.PROJECT_FOLDER }}" | Write-Host
        } else {
          Write-Host "❌ Project folder not found"
          exit 1
        }
      shell: powershell

    - name: Restore NuGet packages
      run: |
        cd "${{ env.PROJECT_FOLDER }}"
        if (Test-Path "packages.config") {
          nuget restore packages.config
          Write-Host "✅ NuGet restore completed"
        }
      shell: powershell

    - name: Build application
      run: |
        cd "${{ env.PROJECT_FOLDER }}"
        msbuild "${{ env.PROJECT_NAME }}.csproj" /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform="Any CPU"
      shell: powershell

    - name: Verify build
      run: |
        cd "${{ env.PROJECT_FOLDER }}"
        if (Test-Path "bin") {
          Write-Host "✅ Build successful - bin folder created"
          Get-ChildItem "bin" -Recurse | Write-Host
        } else {
          Write-Host "❌ Build failed - no bin folder"
          exit 1
        }
      shell: powershell

    - name: Create deployment package
      run: |
        New-Item -ItemType Directory -Force -Path "deploy"
        
        # Copy main files
        Copy-Item "${{ env.PROJECT_FOLDER }}\*.aspx" "deploy\" -ErrorAction Continue
        Copy-Item "${{ env.PROJECT_FOLDER }}\*.asax" "deploy\" -ErrorAction Continue
        Copy-Item "${{ env.PROJECT_FOLDER }}\Web.config" "deploy\" -ErrorAction Continue
        
        # Copy bin folder
        if (Test-Path "${{ env.PROJECT_FOLDER }}\bin") {
          Copy-Item "${{ env.PROJECT_FOLDER }}\bin" "deploy\" -Recurse -Force
        }
        
        # Copy Content folder
        if (Test-Path "${{ env.PROJECT_FOLDER }}\Content") {
          Copy-Item "${{ env.PROJECT_FOLDER }}\Content" "deploy\" -Recurse -Force
        }
        
        Write-Host "✅ Deployment package created"
        Get-ChildItem "deploy" -Recurse | Write-Host
      shell: powershell

    - name: Set version
      run: |
        if ($env:GITHUB_REF -match 'refs/tags/(.*)') {
          $version = $matches[1]
        } else {
          $version = "dev-$($env:GITHUB_SHA.Substring(0,7))"
        }
        echo "VERSION=$version" >> $env:GITHUB_ENV
      shell: powershell

    - name: Create deployment info
      run: |
        $info = @"
        Web Calculator Deployment Package
        =================================
        Version: $env:VERSION
        Build Date: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC')
        Commit: $env:GITHUB_SHA

        IIS Deployment:
        1. Extract this package to your web directory
        2. Create IIS Application pointing to the folder
        3. Set Application Pool to .NET Framework 4.8
        4. Browse to Default.aspx

        Requirements:
        - Windows Server with IIS
        - .NET Framework 4.8
        - ASP.NET enabled
        "@
        $info | Out-File "deploy\README.txt" -Encoding UTF8
      shell: powershell

    - name: Create ZIP package
      run: |
        $zipName = "${{ env.PROJECT_NAME }}-$env:VERSION.zip"
        Compress-Archive -Path "deploy\*" -DestinationPath $zipName
        echo "PACKAGE_NAME=$zipName" >> $env:GITHUB_ENV
        Write-Host "✅ Created package: $zipName"
      shell: powershell

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PROJECT_NAME }}-${{ env.VERSION }}
        path: deploy/
        retention-days: 30

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: ${{ env.PACKAGE_NAME }}
        name: Web Calculator ${{ env.VERSION }}
        body: |
          ## Web Calculator Release ${{ env.VERSION }}
          
          ASP.NET Web Forms calculator application ready for IIS deployment.
          
          ### Features
          - Responsive web interface
          - Basic arithmetic operations
          - Professional design
          - IIS deployment ready
          
          ### Quick Deploy
          1. Download the ZIP file below
          2. Extract to IIS web directory
          3. Create IIS Application
          4. Browse to Default.aspx
          
          ### Requirements
          - Windows Server with IIS
          - .NET Framework 4.8
          - ASP.NET Web Forms enabled

    - name: Build summary
      run: |
        Write-Host "## ✅ Build Summary" >> $env:GITHUB_STEP_SUMMARY
        Write-Host "- **Version**: $env:VERSION" >> $env:GITHUB_STEP_SUMMARY
        Write-Host "- **Package**: $env:PACKAGE_NAME" >> $env:GITHUB_STEP_SUMMARY
        Write-Host "- **Status**: Build completed successfully" >> $env:GITHUB_STEP_SUMMARY
        Write-Host "- **Artifacts**: Available for download" >> $env:GITHUB_STEP_SUMMARY
      shell: powershell

    # - name: Build Summary
    #   run: |
    #     echo "## 🎉 Web Calculator Build Completed Successfully!" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### 🌐 Application Details" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Project**: ASP.NET Web Forms Calculator" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Framework**: .NET Framework ${{ env.DOTNET_FRAMEWORK_VERSION }}" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Version**: $env:VERSION_TAG" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Build Configuration**: ${{ env.BUILD_CONFIGURATION }}" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Deployment Package**: $env:PACKAGE_NAME" >> $env:GITHUB_STEP_SUMMARY
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### 📦 Available Downloads" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **GitHub Actions Artifacts**: Available for 30 days" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **IIS Deployment Package**: Ready-to-deploy ZIP file" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- **Source Code Package**: Complete source code" >> $env:GITHUB_STEP_SUMMARY
    #     if ($env:GITHUB_REF -match 'refs/tags/') {
    #       echo "- **GitHub Releases**: Permanent release packages" >> $env:GITHUB_STEP_SUMMARY
    #     }
    #     if ($env:GITHUB_REF -match 'refs/heads/(main|develop)' -or $env:GITHUB_REF -match 'refs/tags/') {
    #       echo "- **GitHub Packages**: NPM-style package registry" >> $env:GITHUB_STEP_SUMMARY
    #     }
    #     echo "" >> $env:GITHUB_STEP_SUMMARY
    #     echo "### 🚀 IIS Deployment Ready!" >> $env:GITHUB_STEP_SUMMARY
    #     echo "The deployment package includes everything needed for IIS:" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- Compiled binaries and dependencies" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- Optimized production web.config" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- Complete deployment instructions" >> $env:GITHUB_STEP_SUMMARY
    #     echo "- All static content (CSS, images, etc.)" >> $env:GITHUB_STEP_SUMMARY
    #   shell: powershell